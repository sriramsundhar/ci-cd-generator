/**
 * Find if job already exixts
 * @param jobName [Name of the job]
 * @return [True if job already exists]
 */
def doesJobsExists(String jobName) {
  def instance = jenkins.model.Jenkins.instance
  return instance.getItem(jobName) != null
}

/**
 * Copy reference files for jenkins/CFN from pipeline repo to target repo
 * @return [True when sucessful]
 */
def copyFilesFromStandardTemplate(String folder) {
  sh "pwd"
  return sh(script: "cp -rv ../../src/standardTemplates/${folder} .")
}
/**
 * Add all files in the folder and push it to source repo
 * @param message [Commit message]
 */
def gitCommitPush(String message) {
  sh(script: "git add .")
  sh(script: "git commit -m \"${message}\"")
  sh(script: "git status")
  sh(script: "git push origin master")
}

pipeline {
  agent {
    node {
      label 'alpine'
    }
  }
  stages {
    stage('Setup') {
      steps {
        script {
          config = readProperties(file: 'src/jenkins/config.env')
          config.REPO_NAME = env.GIT_URL.tokenize('/').last().tokenize('.').first()
          println("REPO_NAME: ${config.REPO_NAME}")
        }
      }
    }
    stage('SanityCheck: Pipeline') {
      steps {
        script {
          // def projectName = env.REPO_NAME.tokenize('/').last()
          def projectName = env.GIT_URL.tokenize('/').last().tokenize('.').first()
          println("projectName: ${projectName}")
          env.JOB_EXISTS = doesJobsExists(projectName)
        }
      }
    }
    stage("Override pipeline??") {
      agent none
      when { environment name: 'JOB_EXISTS', value: 'true' }
      steps {
        timeout(time: 15, unit: 'MINUTES') {
          input(message: "Jenkins pipeline for this repo ${config.REPO_NAME} exists. Do you want to override pipeline config?")
        }
      }
      post {
        success {
          echo 'Proceeding to create pipeline'
        }
        aborted {
          echo "job aborted."
        }
      }
    }
    stage('SanityCheck: Git repo') {
      steps {
        println("Checkout the repo: ${config.REPO_NAME}")
        dir(REPO_NAME) {
          git(url: env.GIT_URL, credentialsId: "${config.SSH_KEY_ID}", branch: 'master')
          script {
            env.JENKINS_FOLDER_EXISTS = fileExists('jenkins')
            env.CFN_FOLDER_EXISTS = fileExists('cfn')
          }
        }
      }
    }
    stage('Copy jenkins files') {
      when { environment name: 'JENKINS_FOLDER_EXISTS', value: 'false' }
      steps {
        println("Copy jenkins reference files to ${config.REPO_NAME} repo")
        dir(REPO_NAME) {
          git(url: env.GIT_URL, credentialsId: "${config.SSH_KEY_ID}", branch: 'master')
          sshagent(credentials: ["${config.SSH_KEY_ID}"], ignoreMissing: false) {
            copyFilesFromStandardTemplate('jenkins')
            gitCommitPush("Add jenkins files")
          }
        }
      }
    }
    stage('Copy CFN files') {
      when { environment name: 'CFN_FOLDER_EXISTS', value: 'false' }
      steps {
        println("Copy CFN reference files to ${config.REPO_NAME} repo")
        dir(REPO_NAME) {
          git(url: env.GIT_URL, credentialsId: "${config.SSH_KEY_ID}", branch: 'master')
          sshagent(credentials: ["${config.SSH_KEY_ID}"], ignoreMissing: false) {
            copyFilesFromStandardTemplate('cfn')
            gitCommitPush("Add cfn files")
          }
        }
      }
    }
    stage('Trigger pipeline creation') {
      steps {
        println("Creating pipeline")
        config.repoType = env.GIT_URL.contains('github') ? 'github' : 'bitbucket'
        println(config.repoType)
      }
      post {
        success {
          echo 'Creating pipeline'
          // build job: 'ci-cd-generator/jobs-generator-github', parameters: [[$class: 'StringParameterValue', name: 'REPO_NAME', value: "${config.REPO_NAME}"]], wait: false
        }
        aborted {
          echo "job aborted."
        }
      }
    }
  }
}